#pragma once

#include <stdexcept> // Включаем заголовочный файл для обработки исключений

// Определение структуры для элемента двусторонней очереди
struct Node {
    int data;          // Данные, хранящиеся в узле (целое число)
    Node* prev;   // Указатель на предыдущий узел
    Node* next;   // Указатель на следующий узел

    // Конструктор для инициализации узла
    Node(int value);
};

// Класс MyDeque (двусторонняя очередь)
class MyDeque {
private:
    Node* head;   // Указатель на голову очереди (первый элемент)
    Node* tail;   // Указатель на хвост очереди (последний элемент)
    int size;          // Текущий размер очереди

    // Вспомогательный метод для удаления всех узлов в очереди (для деструктора и очистки)
    void clearMyDeque();

public:
    // Конструктор: создает пустую очередь
    MyDeque();

    // Деструктор: освобождает память, занятую элементами очереди
    ~MyDeque();

    // Проверка, пуста ли очередь
    bool isEmpty() const;

    // Возвращает количество элементов в очереди
    int getSize() const;

    // Добавление элемента в начало очереди (front)
    void pushFront(int value);

    // Добавление элемента в конец очереди (back)
    void pushBack(int value);

    // Удаление элемента из начала очереди (front)
    void popFront();

    // Удаление элемента из конца очереди (back)
    void popBack();

    // Получение элемента из начала очереди (front)
    int getFront() const;

    // Получение элемента из конца очереди (back)
    int getBack() const;

    // Метод для вывода содержимого очереди (для отладки/тестирования)
    void printMyDeque() const;
};

